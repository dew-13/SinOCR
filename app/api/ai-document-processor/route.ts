import { NextRequest, NextResponse } from "next/server";
import { GoogleGenerativeAI } from "@google/generative-ai";

// Initialize Gemini AI with free API key
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);

export async function POST(req: NextRequest) {
  try {
    console.log("üîÑ Starting AI document processing...");
    
    const formData = await req.formData();
    const file = formData.get("file") as File;

    if (!file) {
      return NextResponse.json({ error: "No file provided" }, { status: 400 });
    }

    console.log("üìÑ File received:", file.name, file.size, "bytes");

    // Convert file to base64 for Gemini Vision
    const buffer = await file.arrayBuffer();
    const base64 = Buffer.from(buffer).toString("base64");
    const mimeType = file.type || 'image/jpeg';
    
    console.log("ü§ñ Processing with Gemini Vision + AI...");
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

    // Enhanced gender detection function
    const detectGender = (text: string): string => {
      const genderMappings = {
        // Sinhala terms for female
        '‡∑É‡∑ä‡∂≠‡∑ä‚Äç‡∂ª‡∑ì': 'female',
        '‡∑É‡∑ä‡∂≠‡∑ä‡∂ª‡∑ì': 'female', 
        '‡∂ú‡∑ê‡∑Ñ‡∑ê‡∂´‡∑î': 'female',
        '‡∂ö‡∑è‡∂±‡∑ä‡∂≠‡∑è': 'female',
        // Sinhala terms for male
        '‡∂¥‡∑î‡∂ª‡∑î‡∑Ç': 'male',
        '‡∂¥‡∑î‡∂ª‡∑î‡∑Ç‡∑è': 'male',
        '‡∂¥‡∑í‡∂ª‡∑í‡∂∏‡∑í': 'male',
        '‡∂±‡∂ª‡∂∫‡∑è': 'male',
        // English terms
        'male': 'male',
        'female': 'female',
        'man': 'male',
        'woman': 'female'
      };

      // Convert text to lowercase for matching
      const lowerText = text.toLowerCase();
      
      // Check for gender field context
      const genderFieldPattern = /(?:‡∑É‡∑ä‡∂≠‡∑ä‚Äç‡∂ª‡∑ì|‡∂¥‡∑î‡∂ª‡∑î‡∑Ç|gender|sex|‡∑É‡∑ä‡∂≠‡∑ä‚Äç‡∂ª‡∑ì\s*\/\s*‡∂¥‡∑î‡∂ª‡∑î‡∑Ç)/i;
      
      // Look for checked boxes or marked fields near gender indicators
      const lines = text.split('\n');
      for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        
        // If this line contains gender field indicator
        if (genderFieldPattern.test(line)) {
          // Check current line and next few lines for marked options
          for (let j = 0; j < 3 && (i + j) < lines.length; j++) {
            const checkLine = lines[i + j];
            
            // Look for checkmarks, X marks, or circled options
            const markedPattern = /[‚úì‚úó√ó‚úîÔ∏è‚òëÔ∏èüóπ]|checked|marked|circled|\[x\]|\(x\)/i;
            
            if (markedPattern.test(checkLine)) {
              // Check which gender term is marked
              for (const [sinhala, english] of Object.entries(genderMappings)) {
                if (checkLine.includes(sinhala)) {
                  console.log(`üéØ Gender detected: Found marked ${sinhala} ‚Üí ${english}`);
                  return english;
                }
              }
            }
          }
        }
        
        // Direct detection of gender terms in the line
        for (const [sinhala, english] of Object.entries(genderMappings)) {
          if (line.includes(sinhala)) {
            // Check if this appears to be marked/selected
            const hasMarker = /[‚úì‚úó√ó‚úîÔ∏è‚òëÔ∏èüóπ]|checked|marked|\[x\]|\(x\)/i.test(line);
            if (hasMarker) {
              console.log(`üéØ Gender detected: Found marked ${sinhala} ‚Üí ${english}`);
              return english;
            }
          }
        }
      }
      
      // Fallback: look for any gender terms in the text
      for (const [sinhala, english] of Object.entries(genderMappings)) {
        if (text.includes(sinhala)) {
          console.log(`üîç Gender fallback: Found ${sinhala} ‚Üí ${english}`);
          return english;
        }
      }
      
      return '';
    };

    // Enhanced district detection function with Sinhala mapping
    const detectDistrict = (text: string): string => {
      const districtMappings = {
        // English to standardized English
        'ampara': 'Ampara',
        'anuradhapura': 'Anuradhapura', 
        'badulla': 'Badulla',
        'batticaloa': 'Batticaloa',
        'colombo': 'Colombo',
        'galle': 'Galle',
        'gampaha': 'Gampaha',
        'hambantota': 'Hambantota',
        'jaffna': 'Jaffna',
        'kalutara': 'Kalutara',
        'kandy': 'Kandy',
        'kegalle': 'Kegalle',
        'kilinochchi': 'Kilinochchi',
        'kurunegala': 'Kurunegala',
        'mannar': 'Mannar',
        'matale': 'Matale',
        'matara': 'Matara',
        'monaragala': 'Monaragala',
        'mullaitivu': 'Mullaitivu',
        'nuwara eliya': 'Nuwara Eliya',
        'polonnaruwa': 'Polonnaruwa',
        'puttalam': 'Puttalam',
        'ratnapura': 'Ratnapura',
        'trincomalee': 'Trincomalee',
        'vavuniya': 'Vavuniya',
        
        // Sinhala to English mapping
        '‡∂Ö‡∂∏‡∑ä‡∂¥‡∑è‡∂ª': 'Ampara',
        '‡∂Ö‡∂±‡∑î‡∂ª‡∑è‡∂∞‡∂¥‡∑î‡∂ª': 'Anuradhapura',
        '‡∂∂‡∂Ø‡∑î‡∂Ω‡∑ä‡∂Ω': 'Badulla',
        '‡∂∏‡∂©‡∂ö‡∂Ω‡∂¥‡∑î‡∑Ä': 'Batticaloa',
        '‡∂∂‡∂≠‡∑ä‡∂≠‡∑í‡∂ö‡∂Ω‡∑è‡∑Ä': 'Batticaloa',
        '‡∂ö‡∑ú‡∑Ö‡∂π': 'Colombo',
        '‡∂ú‡∑è‡∂Ω‡∑ä‡∂Ω': 'Galle',
        '‡∂ú‡∂∏‡∑ä‡∂¥‡∑Ñ': 'Gampaha',
        '‡∑Ñ‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂≠‡∑ú‡∂ß': 'Hambantota',
        '‡∂∫‡∑è‡∂¥‡∂±‡∂∫': 'Jaffna',
        '‡∂ö‡∂Ω‡∑î‡∂≠‡∂ª': 'Kalutara',
        '‡∂∏‡∑Ñ‡∂±‡∑î‡∑Ä‡∂ª': 'Kandy',
        '‡∂ö‡∑ë‡∂ú‡∂Ω‡∑ä‡∂Ω': 'Kegalle',
        '‡∂ö‡∑í‡∂Ω‡∑í‡∂±‡∑ú‡∂†‡∑ä‡∂†‡∑í': 'Kilinochchi',
        '‡∂ö‡∑î‡∂ª‡∑î‡∂´‡∑ë‡∂ú‡∂Ω': 'Kurunegala',
        '‡∂∏‡∂±‡∑ä‡∂±‡∑è‡∂ª‡∂∏': 'Mannar',
        '‡∂∏‡∂≠‡∂Ω‡∑ö': 'Matale',
        '‡∂∏‡∑è‡∂≠‡∂ª': 'Matara',
        '‡∂∏‡∑ú‡∂±‡∂ª‡∑è‡∂ú‡∂Ω': 'Monaragala',
        '‡∂∏‡∑î‡∂Ω‡∂≠‡∑í‡∑Ä‡∑ä': 'Mullaitivu',
        '‡∂±‡∑î‡∑Ä‡∂ª ‡∂ë‡∑Ö‡∑í‡∂∫': 'Nuwara Eliya',
        '‡∂¥‡∑ú‡∑Ö‡∑ú‡∂±‡∑ä‡∂±‡∂ª‡∑î‡∑Ä': 'Polonnaruwa',
        '‡∂¥‡∑î‡∂≠‡∑ä‡∂≠‡∂Ω‡∂∏': 'Puttalam',
        '‡∂ª‡∂≠‡∑ä‡∂±‡∂¥‡∑î‡∂ª': 'Ratnapura',
        '‡∂≠‡∑ä‚Äç‡∂ª‡∑í‡∂ö‡∑î‡∂´‡∑è‡∂∏‡∂Ω‡∂∫': 'Trincomalee',
        '‡∑Ä‡∑Ä‡∑î‡∂±‡∑í‡∂∫‡∑è‡∑Ä': 'Vavuniya',
        
        // Common variations and abbreviations
        'nuwara-eliya': 'Nuwara Eliya',
        'nuwaraeliya': 'Nuwara Eliya',
        'nuwara': 'Nuwara Eliya',
        'eliya': 'Nuwara Eliya',
        '‡∂ö‡∂±‡∑ä‡∂Ø': 'Kandy',
        '‡∂ö‡∑ú‡∑Ö‡∂∏‡∑ä‡∂∂': 'Colombo'
      };

      // Convert text to lowercase for matching
      const lowerText = text.toLowerCase();
      
      // Check for district field context
      const districtFieldPattern = /(?:district|‡∂Ø‡∑í‡∑É‡∑ä‡∂≠‡∑ä‚Äç‡∂ª‡∑í‡∂ö‡∑ä‡∂ö‡∂∫|‡∂ú‡∂∏)/i;
      
      // Look for marked districts near district field indicators
      const lines = text.split('\n');
      for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        
        // If this line contains district field indicator
        if (districtFieldPattern.test(line)) {
          // Check current line and next few lines for district names
          for (let j = 0; j < 3 && (i + j) < lines.length; j++) {
            const checkLine = lines[i + j];
            
            // Check for each district mapping
            for (const [term, standardName] of Object.entries(districtMappings)) {
              if (checkLine.toLowerCase().includes(term.toLowerCase()) || checkLine.includes(term)) {
                console.log(`üéØ District detected: Found ${term} ‚Üí ${standardName}`);
                return standardName;
              }
            }
          }
        }
        
        // Direct detection of district names in any line
        for (const [term, standardName] of Object.entries(districtMappings)) {
          if (line.toLowerCase().includes(term.toLowerCase()) || line.includes(term)) {
            console.log(`üîç District detected: Found ${term} ‚Üí ${standardName}`);
            return standardName;
          }
        }
      }
      
      return '';
    };

    const prompt = `
You are an expert at reading Sinhala student registration forms. Analyze this image very carefully and extract ALL visible information with high accuracy.

CRITICAL INSTRUCTIONS:
1. Look for EVERY piece of text, numbers, checkboxes, and markings
2. TRANSLATE all Sinhala text to English - DO NOT keep Sinhala in the output
3. Pay EXTRA attention to gender/sex field "‡∑É‡∑ä‡∂≠‡∑ä‚Äç‡∂ª‡∑ì /‡∂¥‡∑î‡∂ª‡∑î‡∑Ç ‡∂∑‡∑è‡∑Ä‡∂∫" - look for checkmarks, circles, or any marking indicating selection
4. Examine marital status carefully (‡∂Ö‡∑Ä‡∑í‡∑Ä‡∑è‡∑Ñ‡∂ö/‡∑Ä‡∑í‡∑Ä‡∑è‡∑Ñ‡∂ö ‚Üí Single/Married)
5. Check all education fields thoroughly (O/L, A/L, ‡∂á‡∂≠/‡∂±‡∑ê‡∂≠ ‚Üí true/false)
6. Extract phone numbers without country codes (remove +94, 0 prefix ‚Üí 9 digits only)

GENDER FIELD SPECIAL ATTENTION:
- Look for field "7. ‡∑É‡∑ä‡∂≠‡∑ä‚Äç‡∂ª‡∑ì /‡∂¥‡∑î‡∂ª‡∑î‡∑Ç ‡∂∑‡∑è‡∑Ä‡∂∫" or similar
- ‡∑É‡∑ä‡∂≠‡∑ä‚Äç‡∂ª‡∑ì = Female
- ‡∂¥‡∑î‡∂ª‡∑î‡∑Ç = Male  
- Check which option is marked with ‚úì, ‚úó, circle, underline, or any marking
- If you see both terms but only one is marked, return the marked one

DISTRICT FIELD SPECIAL ATTENTION:
- Look for field "‡∂Ø‡∑í‡∑É‡∑ä‡∂≠‡∑ä‚Äç‡∂ª‡∑í‡∂ö‡∑ä‡∂ö‡∂∫" (district) or similar
- All 25 Sri Lankan districts with Sinhala names:
  Ampara (‡∂Ö‡∂∏‡∑ä‡∂¥‡∑è‡∂ª), Anuradhapura (‡∂Ö‡∂±‡∑î‡∂ª‡∑è‡∂∞‡∂¥‡∑î‡∂ª), Badulla (‡∂∂‡∂Ø‡∑î‡∂Ω‡∑ä‡∂Ω), 
  Batticaloa (‡∂∏‡∂©‡∂ö‡∂Ω‡∂¥‡∑î‡∑Ä/‡∂∂‡∂≠‡∑ä‡∂≠‡∑í‡∂ö‡∂Ω‡∑è‡∑Ä), Colombo (‡∂ö‡∑ú‡∑Ö‡∂π), Galle (‡∂ú‡∑è‡∂Ω‡∑ä‡∂Ω), 
  Gampaha (‡∂ú‡∂∏‡∑ä‡∂¥‡∑Ñ), Hambantota (‡∑Ñ‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂≠‡∑ú‡∂ß), Jaffna (‡∂∫‡∑è‡∂¥‡∂±‡∂∫), 
  Kalutara (‡∂ö‡∂Ω‡∑î‡∂≠‡∂ª), Kandy (‡∂∏‡∑Ñ‡∂±‡∑î‡∑Ä‡∂ª), Kegalle (‡∂ö‡∑ë‡∂ú‡∂Ω‡∑ä‡∂Ω), 
  Kilinochchi (‡∂ö‡∑í‡∂Ω‡∑í‡∂±‡∑ú‡∂†‡∑ä‡∂†‡∑í), Kurunegala (‡∂ö‡∑î‡∂ª‡∑î‡∂´‡∑ë‡∂ú‡∂Ω), Mannar (‡∂∏‡∂±‡∑ä‡∂±‡∑è‡∂ª‡∂∏), 
  Matale (‡∂∏‡∂≠‡∂Ω‡∑ö), Matara (‡∂∏‡∑è‡∂≠‡∂ª), Monaragala (‡∂∏‡∑ú‡∂±‡∂ª‡∑è‡∂ú‡∂Ω), 
  Mullaitivu (‡∂∏‡∑î‡∂Ω‡∂≠‡∑í‡∑Ä‡∑ä), Nuwara Eliya (‡∂±‡∑î‡∑Ä‡∂ª ‡∂ë‡∑Ö‡∑í‡∂∫), 
  Polonnaruwa (‡∂¥‡∑ú‡∑Ö‡∑ú‡∂±‡∑ä‡∂±‡∂ª‡∑î‡∑Ä), Puttalam (‡∂¥‡∑î‡∂≠‡∑ä‡∂≠‡∂Ω‡∂∏), 
  Ratnapura (‡∂ª‡∂≠‡∑ä‡∂±‡∂¥‡∑î‡∂ª), Trincomalee (‡∂≠‡∑ä‚Äç‡∂ª‡∑í‡∂ö‡∑î‡∂´‡∑è‡∂∏‡∂Ω‡∂∫), Vavuniya (‡∑Ä‡∑Ä‡∑î‡∂±‡∑í‡∂∫‡∑è‡∑Ä)
- Check which district name is marked, written, or selected
- Convert Sinhala district names to English equivalents

SPECIFIC TRANSLATIONS:
- ‡∑É‡∑ä‡∂≠‡∑ä‚Äç‡∂ª‡∑ì ‚Üí "female", ‡∂¥‡∑î‡∂ª‡∑î‡∑Ç ‚Üí "male"
- ‡∂Ö‡∑Ä‡∑í‡∑Ä‡∑è‡∑Ñ‡∂ö ‚Üí "Single", ‡∑Ä‡∑í‡∑Ä‡∑è‡∑Ñ‡∂ö ‚Üí "Married", ‡∂Ø‡∑í‡∂ö‡∑ä‡∂ö‡∑É‡∑è‡∂Ø ‚Üí "Divorced"
- ‡∂á‡∂≠ ‚Üí true, ‡∂±‡∑ê‡∂≠ ‚Üí false
- ‡∂∂‡∑É‡∂ª‡∂ß ‚Üí "Western", ‡∂∏‡∂∞‡∑ä‚Äç‡∂∫‡∂∏ ‚Üí "Central", ‡∂Ø‡∂ö‡∑î‡∂´ ‚Üí "Southern"
- Districts: ‡∂Ö‡∂∏‡∑ä‡∂¥‡∑è‡∂ª ‚Üí "Ampara", ‡∂Ö‡∂±‡∑î‡∂ª‡∑è‡∂∞‡∂¥‡∑î‡∂ª ‚Üí "Anuradhapura", ‡∂∂‡∂Ø‡∑î‡∂Ω‡∑ä‡∂Ω ‚Üí "Badulla", 
  ‡∂∏‡∂©‡∂ö‡∂Ω‡∂¥‡∑î‡∑Ä ‚Üí "Batticaloa", ‡∂ö‡∑ú‡∑Ö‡∂π ‚Üí "Colombo", ‡∂ú‡∑è‡∂Ω‡∑ä‡∂Ω ‚Üí "Galle", ‡∂ú‡∂∏‡∑ä‡∂¥‡∑Ñ ‚Üí "Gampaha",
  ‡∑Ñ‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂≠‡∑ú‡∂ß ‚Üí "Hambantota", ‡∂∫‡∑è‡∂¥‡∂±‡∂∫ ‚Üí "Jaffna", ‡∂ö‡∂Ω‡∑î‡∂≠‡∂ª ‚Üí "Kalutara", ‡∂∏‡∑Ñ‡∂±‡∑î‡∑Ä‡∂ª ‚Üí "Kandy",
  ‡∂ö‡∑ë‡∂ú‡∂Ω‡∑ä‡∂Ω ‚Üí "Kegalle", ‡∂ö‡∑í‡∂Ω‡∑í‡∂±‡∑ú‡∂†‡∑ä‡∂†‡∑í ‚Üí "Kilinochchi", ‡∂ö‡∑î‡∂ª‡∑î‡∂´‡∑ë‡∂ú‡∂Ω ‚Üí "Kurunegala", 
  ‡∂∏‡∂±‡∑ä‡∂±‡∑è‡∂ª‡∂∏ ‚Üí "Mannar", ‡∂∏‡∂≠‡∂Ω‡∑ö ‚Üí "Matale", ‡∂∏‡∑è‡∂≠‡∂ª ‚Üí "Matara", ‡∂∏‡∑ú‡∂±‡∂ª‡∑è‡∂ú‡∂Ω ‚Üí "Monaragala",
  ‡∂∏‡∑î‡∂Ω‡∂≠‡∑í‡∑Ä‡∑ä ‚Üí "Mullaitivu", ‡∂±‡∑î‡∑Ä‡∂ª ‡∂ë‡∑Ö‡∑í‡∂∫ ‚Üí "Nuwara Eliya", ‡∂¥‡∑ú‡∑Ö‡∑ú‡∂±‡∑ä‡∂±‡∂ª‡∑î‡∑Ä ‚Üí "Polonnaruwa",
  ‡∂¥‡∑î‡∂≠‡∑ä‡∂≠‡∂Ω‡∂∏ ‚Üí "Puttalam", ‡∂ª‡∂≠‡∑ä‡∂±‡∂¥‡∑î‡∂ª ‚Üí "Ratnapura", ‡∂≠‡∑ä‚Äç‡∂ª‡∑í‡∂ö‡∑î‡∂´‡∑è‡∂∏‡∂Ω‡∂∫ ‚Üí "Trincomalee", ‡∑Ä‡∑Ä‡∑î‡∂±‡∑í‡∂∫‡∑è‡∑Ä ‚Üí "Vavuniya"

PHONE NUMBER FORMATTING:
- 0771234567 ‚Üí "771234567" (remove leading 0)
- +94771234567 ‚Üí "771234567" (remove +94)

DATE FORMATTING:
- Convert any date to YYYY-MM-DD format

FIELD MAPPING:
- Full Name: Translate Sinhala names to English phonetically
- Address: Translate addresses to English
- Province: Use exact English province names
- District: Use exact English district names

Return ONLY this JSON with ALL TEXT IN ENGLISH:
{
  "fullName": "",
  "permanentAddress": "",
  "province": "",
  "district": "",
  "dateOfBirth": "",
  "nationalId": "",
  "passportId": "",
  "passportExpiredDate": "",
  "sex": "",
  "maritalStatus": "",
  "spouseName": "",
  "numberOfChildren": 0,
  "mobilePhone": "",
  "whatsappNumber": "",
  "emailAddress": "",
  "hasDrivingLicense": false,
  "vehicleType": "",
  "educationOL": false,
  "educationAL": false,
  "otherQualifications": "",
  "workExperience": "",
  "workExperienceAbroad": "",
  "expectedJobCategory": "",
  "guardianName": "",
  "guardianContact": ""
}`;

    const imagePart = {
      inlineData: {
        data: base64,
        mimeType: mimeType,
      },
    };

    console.log("üìù Sending to Gemini Vision...");
    const result = await model.generateContent([prompt, imagePart]);
    const response = result.response;
    const aiText = response.text();

    console.log("‚úÖ Gemini response received");
    console.log("üìÑ Raw AI response:", aiText.substring(0, 500) + "...");

    // Parse the AI response
    let extractedData;
    try {
      // Extract JSON from the response (in case there's extra text)
      const jsonRegex = /\{[\s\S]*\}/;
      const jsonMatch = jsonRegex.exec(aiText);
      if (jsonMatch) {
        extractedData = JSON.parse(jsonMatch[0]);
        console.log("‚úÖ Successfully parsed extracted data");
        
        // Post-process district field with enhanced detection
        if (!extractedData.district || extractedData.district === '') {
          const detectedDistrict = detectDistrict(aiText);
          if (detectedDistrict) {
            extractedData.district = detectedDistrict;
            console.log("üîß District post-processing: Updated to", detectedDistrict);
          }
        } else {
          // Validate existing district field
          const validDistricts = [
            'Ampara', 'Anuradhapura', 'Badulla', 'Batticaloa', 'Colombo', 'Galle', 
            'Gampaha', 'Hambantota', 'Jaffna', 'Kalutara', 'Kandy', 'Kegalle', 
            'Kilinochchi', 'Kurunegala', 'Mannar', 'Matale', 'Matara', 'Monaragala', 
            'Mullaitivu', 'Nuwara Eliya', 'Polonnaruwa', 'Puttalam', 'Ratnapura', 
            'Trincomalee', 'Vavuniya'
          ];
          if (!validDistricts.includes(extractedData.district)) {
            const detectedDistrict = detectDistrict(aiText);
            if (detectedDistrict) {
              extractedData.district = detectedDistrict;
              console.log("üîß District validation: Corrected to", detectedDistrict);
            }
          }
        }

        // Post-process gender field with enhanced detection
        if (!extractedData.sex || extractedData.sex === '') {
          const detectedGender = detectGender(aiText);
          if (detectedGender) {
            extractedData.sex = detectedGender;
            console.log("üîß Gender post-processing: Updated to", detectedGender);
          }
        } else {
          // Validate existing gender field
          const validGenders = ['male', 'female', 'other'];
          if (!validGenders.includes(extractedData.sex.toLowerCase())) {
            const detectedGender = detectGender(aiText);
            if (detectedGender) {
              extractedData.sex = detectedGender;
              console.log("üîß Gender validation: Corrected to", detectedGender);
            }
          }
        }
        
        // Additional validation for gender field
        if (extractedData.sex && !['male', 'female', 'other'].includes(extractedData.sex.toLowerCase())) {
          console.log("‚ö†Ô∏è Warning: Unexpected gender value:", extractedData.sex);
          // Try to map common variations
          const genderNormalization: Record<string, string> = {
            'male': 'male',
            'female': 'female',
            'Male': 'male',
            'Female': 'female',
            'M': 'male',
            'F': 'female',
            '‡∂¥‡∑î‡∂ª‡∑î‡∑Ç': 'male',
            '‡∑É‡∑ä‡∂≠‡∑ä‚Äç‡∂ª‡∑ì': 'female'
          };
          
          if (genderNormalization[extractedData.sex as string]) {
            extractedData.sex = genderNormalization[extractedData.sex as string];
            console.log("üîß Gender normalized to:", extractedData.sex);
          }
        }
        
        // Log key fields for debugging
        console.log("üîç Key extracted fields:");
        console.log("  - Full Name:", extractedData.fullName || "‚ùå Missing");
        console.log("  - Sex/Gender:", extractedData.sex || "‚ùå Missing");
        console.log("  - Marital Status:", extractedData.maritalStatus || "‚ùå Missing");
        console.log("  - Mobile Phone:", extractedData.mobilePhone || "‚ùå Missing");
        console.log("  - Education O/L:", extractedData.educationOL);
        console.log("  - Education A/L:", extractedData.educationAL);
        
      } else {
        throw new Error("No valid JSON found in AI response");
      }
    } catch (parseError) {
      console.error("‚ùå Error parsing AI response:", parseError);
      return NextResponse.json({ 
        error: "Failed to parse extracted data",
        aiResponse: aiText,
        rawResponse: aiText
      }, { status: 500 });
    }

    console.log("üéâ Document processing completed successfully");
    return NextResponse.json({ 
      success: true,
      extractedData
    });

  } catch (error) {
    console.error("‚ùå Error in AI document processor:", error);
    return NextResponse.json(
      { error: "Failed to process document" },
      { status: 500 }
    );
  }
}